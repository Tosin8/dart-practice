1. // A single line comment. 
2. VOID - a special type that indicates a value that's never used.
3. INT - indicates an integer. 
4. $variableName (or ${expression}) - string interpolation, including a variable or expression's string equivalent inside of a string literal. 
5. MAIN() - The special required top level function where app executes starts. 
6. VAR - a way to declare a variable without specifying its type. 

IMPORTANT CONCEPTS: 
* Object: everything being placed inside a variable
* Class: it's an instance of every Object
* A variable can be make nullable by putting a question mark (?) at the end of its type. 
* Dart supports generic types, like List<int> ( a list of integers) or List<Object> (a list of Objects of any type)
* Dart supports top level functions, such as main() as well as functions tied to a class or Object( static and instance methods respectively). A functions can be created within functions ( nested or local functions). 
* Private keywords start with underscore (_), making it private to its library. 
*If-else statement in dart - conditional expression condition ? expr1 : expr2
* Dart tools can report two kinds of problems: WARNINGS ( they are just indications that code might not work but they don't prevent the program from executing) and ERRORS ( it can either compile-time or run-time). 

VARIABLES - it stores references. 
LATE VARIABLES - it has two use cases: 
               * declaring a non nullable variable that's initialized after its declaration. 
               * lazily initializing a variable. 
Note: failing to initialize a late variable, a runtime error occurs when the variable is used. 

FINAL AND CONST - using both if never intend to change a variable. A fial variable can be set only once. A const variable is a compile time constant. 

BUILT IN TYPES: 
* Numbers (int, double)
* Strings (String)
* Booleans (bool)
* Lists - also known as arrays
* Sets 
* Maps   * Runes - often replaced by the character API  * Symbols * The value Null 

Note: every built in types have their own constructor. Example: Using Map() constructor to create a map. 

Other types,having special roles in the dart language: 
* Object: the superclass of all dart classes except Null. 
* Future and Stream: used in asynchrony support. 
* Iterable : used in for-loops and in synchronous generator functions
* void: indicates that a value is never used, often used as a return type. 

NUMBERS: coming into two flavors - 
1. Int : On the web, integer values are represented as Javascript numbers ( 64-bit floating point values with no fractional part). They are numbers without a decimal point. 
On native platforms, value can be from -2sup63 to 2sup63 -1. 
2. Double : 64-bit (double precision) floating point numbers. 

Strings - either single or double quotes to create a string, using it either single or double quotes to create a string. 
putting a value of an expression inside a string by using ${expression}, to getting the string corresponding, using the toString() method. 

The == operator tests whether two objects are equivalent.Two Strings are equivalent if they contain the same sequence of code units. 

BOOLEANS - represents bool, literals true and false : which are both compile time constants.

LISTS: dart infers that list has type List<int> 