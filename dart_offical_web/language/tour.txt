1. // A single line comment. 
2. VOID - a special type that indicates a value that's never used.
3. INT - indicates an integer. 
4. $variableName (or ${expression}) - string interpolation, including a variable or expression's string equivalent inside of a string literal. 
5. MAIN() - The special required top level function where app executes starts. 
6. VAR - a way to declare a variable without specifying its type. 

IMPORTANT CONCEPTS: 
* Object: everything being placed inside a variable
* Class: it's an instance of every Object
* A variable can be make nullable by putting a question mark (?) at the end of its type. 
* Dart supports generic types, like List<int> ( a list of integers) or List<Object> (a list of Objects of any type)
* Dart supports top level functions, such as main() as well as functions tied to a class or Object( static and instance methods respectively). A functions can be created within functions ( nested or local functions). 
* Private keywords start with underscore (_), making it private to its library. 
*If-else statement in dart - conditional expression condition ? expr1 : expr2
* Dart tools can report two kinds of problems: WARNINGS ( they are just indications that code might not work but they don't prevent the program from executing) and ERRORS ( it can either compile-time or run-time). 

VARIABLES - it stores references. 
LATE VARIABLES - it has two use cases: 
               * declaring a non nullable variable that's initialized after its declaration. 
               * lazily initializing a variable. 
Note: failing to initialize a late variable, a runtime error occurs when the variable is used. 

FINAL AND CONST - using both if never intend to change a variable. A fial variable can be set only once. A const variable is a compile time constant. 

BUILT IN TYPES: 
* Numbers (int, double)
* Strings (String)
* Booleans (bool)
* Lists - also known as arrays
* Sets 
* Maps   * Runes - often replaced by the character API  * Symbols * The value Null 

Note: every built in types have their own constructor. Example: Using Map() constructor to create a map. 

Other types,having special roles in the dart language: 
* Object: the superclass of all dart classes except Null. 
* Future and Stream: used in asynchrony support. 
* Iterable : used in for-loops and in synchronous generator functions
* void: indicates that a value is never used, often used as a return type. 

NUMBERS: coming into two flavors - 
1. Int : On the web, integer values are represented as Javascript numbers ( 64-bit floating point values with no fractional part). They are numbers without a decimal point. 
On native platforms, value can be from -2sup63 to 2sup63 -1. 
2. Double : 64-bit (double precision) floating point numbers. 

Strings - either single or double quotes to create a string, using it either single or double quotes to create a string. 
putting a value of an expression inside a string by using ${expression}, to getting the string corresponding, using the toString() method. 

The == operator tests whether two objects are equivalent.Two Strings are equivalent if they contain the same sequence of code units. 

BOOLEANS - represents bool, literals true and false : which are both compile time constants.

LISTS: dart infers that list has type List<int> 
* List use zero-based indexing, where 0 is teh index of the first value and list.length - 1 is the index of the last value. 
* getting the list length using the .length property and accessing the list's value using the subscript operator([])
* Using the spread operator(...) and the null aware spead operator(...?) which provides a concise way to insert multiple values into a collection. 

SETS : an unordered collection of unique items. 
MAPS: it's an object that associates keys and values, both key and values can be any type of object. 


FUNCTIONS: they are objects and have a type, Function. They can be assigned to variables or passed as arguments to other functions. 

Note: the => expr syntax is a shorthand for { return expr; }. The => notation is sometimes refered to as arrow syntax. 

Parameters: they are being of two, i.e., having any number of required positonal parameters which can either be - 
   * named Parameters : They are optional unless they're explicitly marked as REQUIRED. Using {param1, param2, ...} to specify named parameters.If named parameter as REQUIRED or don't provide a default value.Their types must be nullable as their default value will be null. If instead want a named parameter to be mandatory, requiring callers to provide a value for the parameter - annotating them with REQUIRED. 
   * optional positonal Parameters

The main() function
- every app must have a top-level main() function, which serves as the entrypont to the app. The main() function returns VOID and has an optional LIST<STRING> parameter for arguments. 

FUNCTIONS AS FIRST-CLASS Object
A function can be pass as a parameter to another function. 

A function can be assigned to a variable, sample:
var loudify = (msg) => '!! ${msg.toUpperCase()} !!';  

Anonmymous functions - they are nameless function, sometimes a lamba or closure.
An Anonmymous function can be assigned to a variable so that it can be removed or add from a collection.  

LEXICAL SCOPE - a dart is lexically scope meaning that the scope of variables is determined statically simply by the layout of the code. Example is using nested functions with variables at each scope level. 

LEXICAL CLOSURES  - A closure is a function object that has access to variables in its lexical scope,even when the function is used outside of its original scope. 